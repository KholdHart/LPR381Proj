=== ESSENTIAL LINEAR PROGRAMMING MODELS ===
Streamlined collection for ALL Algorithms: Primal Simplex & Branch & Bound

=== ALGORITHM COMPATIBILITY ===

‚úÖ PRIMAL SIMPLEX (Algorithm 1):
   - Requires: Continuous variables (+ +)
   - Requires: ‚â§ constraints only
   - Requires: Non-negative RHS
   - Supports: Maximization and Minimization

‚úÖ BRANCH & BOUND SIMPLEX (Algorithm 3):
   - Requires: Integer (int) or Binary (bin) variables
   - Requires: ‚â§ constraints only
   - Requires: Non-negative RHS
   - Supports: Maximization and Minimization

‚úÖ KNAPSACK BRANCH & BOUND (Algorithm 5):
   - Requires: Binary (bin) variables only
   - Requires: Single ‚â§ constraint (capacity)
   - Requires: Non-negative RHS
   - Supports: Maximization only

=== ESSENTIAL MODEL FILES (CLEANED UP) ===

üìÅ PRIMAL SIMPLEX FILES:
   ‚Ä¢ universal_lp.txt     - Basic continuous LP problem
   ‚Ä¢ model.txt           - Standard continuous LP (existing)

üìÅ BRANCH & BOUND FILES:
   ‚Ä¢ universal_ip.txt     - Basic integer programming
   ‚Ä¢ universal_binary.txt - Binary programming (0-1 variables)
   ‚Ä¢ knapsack_small.txt   - Small knapsack problem (3 items)
   ‚Ä¢ knapsack_medium.txt  - Medium knapsack problem (4 items)

=== ESSENTIAL MODEL SPECIFICATIONS ===

MODEL 1: universal_lp.txt (PRIMAL SIMPLEX)
max 3 2
1 2 <= 10
2 1 <= 8
1 1 <= 6
+ +
‚Üí Basic continuous LP for Algorithm 1 (Primal Simplex)

MODEL 2: model.txt (PRIMAL SIMPLEX - EXISTING)
max -60 -30 -20
8 6 1 <= 48
4 2 1.5 <= 20
2 1.5 0.5 <= 8
+ + +
‚Üí Standard 3-variable continuous LP

MODEL 3: universal_ip.txt (BRANCH & BOUND)
max 3 2
1 2 <= 10
2 1 <= 8
1 1 <= 6
int int
‚Üí Basic integer programming for Algorithm 3 (Branch & Bound)

MODEL 4: universal_binary.txt (BRANCH & BOUND)
max 5 8 3
2 3 1 <= 6
1 2 2 <= 5
3 1 2 <= 7
bin bin bin
‚Üí Binary programming (0-1 variables) for Algorithm 3

MODEL 5: knapsack_small.txt (KNAPSACK BRANCH & BOUND)
max 60 100 120
10 20 30 <= 50
bin bin bin
‚Üí Small knapsack: 3 items, capacity 50
  Item 1: value=60, weight=10, ratio=6.0
  Item 2: value=100, weight=20, ratio=5.0  
  Item 3: value=120, weight=30, ratio=4.0
  Optimal: Items 1&2, Value=160, Weight=30

MODEL 6: knapsack_medium.txt (KNAPSACK BRANCH & BOUND)
max 10 20 30 40
2 3 4 5 <= 8
bin bin bin bin
‚Üí Medium knapsack: 4 items, capacity 8
  Item 1: value=10, weight=2, ratio=5.0
  Item 2: value=20, weight=3, ratio=6.67
  Item 3: value=30, weight=4, ratio=7.5
  Item 4: value=40, weight=5, ratio=8.0
  Optimal: Items 1&4, Value=50, Weight=7

=== QUICK START GUIDE ===

üöÄ TESTING INSTRUCTIONS:

1. Run Program:
   .\bin\Debug\LPR381Proj.exe

2. Test Primal Simplex:
   - Load Model: Choose 1, Enter "universal_lp.txt"
   - Solve Model: Choose 2, then 1 (Primal Simplex)

3. Test Branch & Bound:
   - Load Model: Choose 1, Enter "universal_ip.txt"
   - Solve Model: Choose 2, then 3 (Branch & Bound)

4. Test Knapsack Branch & Bound:
   - Load Model: Choose 1, Enter "knapsack_small.txt"
   - Solve Model: Choose 2, then 5 (Branch & Bound Knapsack)

‚úÖ ALGORITHM COMPATIBILITY MATRIX:

File Name              | Primal Simplex | Branch & Bound | Knapsack B&B
-----------------------|----------------|----------------|-------------
universal_lp.txt       |       ‚úÖ       |       ‚ùå       |      ‚ùå
model.txt              |       ‚úÖ       |       ‚ùå       |      ‚ùå
universal_ip.txt       |       ‚ùå       |       ‚úÖ       |      ‚ùå
universal_binary.txt   |       ‚ùå       |       ‚úÖ       |      ‚ùå
knapsack_small.txt     |       ‚ùå       |       ‚ùå       |      ‚úÖ
knapsack_medium.txt    |       ‚ùå       |       ‚ùå       |      ‚úÖ

=== EXPECTED OUTPUTS ===

PRIMAL SIMPLEX:
‚úÖ Canonical form with slack variables
‚úÖ All tableau iterations (formatted tables)
‚úÖ Pivot operations summary
‚úÖ Final optimal solution

BRANCH & BOUND:
‚úÖ Canonical form display
‚úÖ Branch & bound tree exploration
‚úÖ Node-by-node simplex iterations
‚úÖ Fathoming decisions and reasons
‚úÖ Best integer solution found

KNAPSACK BRANCH & BOUND:
‚úÖ Canonical knapsack form display
‚úÖ Items sorted by value/weight ratio
‚úÖ Complete branch & bound tree exploration
‚úÖ All node table iterations with item decisions
‚úÖ Fathoming by bound and infeasibility
‚úÖ Best knapsack solution with included items

=== FILE FORMAT ===
Line 1: max/min [objective coefficients]
Lines 2-n: [constraint coefficients] <= [RHS]
Last line: [variable types: +, int, bin]

=== KNAPSACK PROBLEM FORMAT ===
KNAPSACK PROBLEMS have a specific structure:
‚Ä¢ Line 1: max [item values] (maximization only)
‚Ä¢ Line 2: [item weights] <= [capacity] (single constraint)
‚Ä¢ Line 3: bin bin bin... (all binary variables)

EXAMPLE INTERPRETATION:
max 60 100 120        ‚Üê Item values: v‚ÇÅ=60, v‚ÇÇ=100, v‚ÇÉ=120
10 20 30 <= 50        ‚Üê Item weights: w‚ÇÅ=10, w‚ÇÇ=20, w‚ÇÉ=30, Capacity=50
bin bin bin           ‚Üê All variables are binary (0 or 1)

KNAPSACK OBJECTIVE: Select items to maximize total value while staying within weight capacity.

ALGORITHM 5 FEATURES:
‚úÖ Sorts items by value/weight ratio automatically
‚úÖ Uses fractional upper bound for fathoming
‚úÖ Displays complete branching tree with include/exclude decisions
‚úÖ Shows table iterations for each node with cumulative values/weights
‚úÖ Identifies optimal item combination

=== TESTING THE KNAPSACK IMPLEMENTATION ===

STEP-BY-STEP TEST:
1. Build: dotnet build
2. Run: .\bin\Debug\LPR381Proj.exe
3. Load Model: Choose 1, Enter "knapsack_small.txt"
4. Solve Model: Choose 2, Choose 5 (Branch & Bound Knapsack)

EXPECTED OUTPUT FOR knapsack_small.txt:
‚úÖ Canonical form showing knapsack problem structure
‚úÖ Items sorted by ratio: x1(6.0), x2(5.0), x3(4.0)
‚úÖ Branch & bound tree with include/exclude decisions
‚úÖ Node table iterations showing cumulative values/weights
‚úÖ Fathoming by bound and infeasibility
‚úÖ Optimal solution: x1=1, x2=1, x3=0 (Value=160, Weight=30)

EXPECTED OUTPUT FOR knapsack_medium.txt:
‚úÖ Items sorted by ratio: x4(8.0), x3(7.5), x2(6.67), x1(5.0)
‚úÖ Complete branch & bound exploration
‚úÖ Optimal solution: x1=1, x4=1 (Value=50, Weight=7)

OUTPUT FILE: All iterations and results saved to "output.txt"